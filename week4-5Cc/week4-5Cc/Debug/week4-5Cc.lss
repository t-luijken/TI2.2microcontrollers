
week4-5Cc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  0000037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010cb  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000907  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ea  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000227  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  0000285f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002f4  000002f4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000025e  0000025e  000002b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  00000294  00000294  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  000002ec  000002ec  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  0000027c  0000027c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  000002aa  000002aa  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displayDriverInit 00000062  00000132  00000132  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_writeWord 00000026  00000218  00000218  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.writeNumber 0000008e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000050  00000194  00000194  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.avrlibc 00000016  000002c0  000002c0  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.avrlibc 00000016  000002d6  000002d6  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.avrlibc 00000034  000001e4  000001e4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.avrlibc 00000020  0000023e  0000023e  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
   8:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
   c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  10:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  14:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  18:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  1c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  20:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  24:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  28:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  2c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  34:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  38:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  3c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  40:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  44:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  4c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  50:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  54:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  58:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  5c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  60:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  64:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  68:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  6c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  70:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  74:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  78:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  7c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  80:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  84:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>
  88:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000002f4 <__bad_interrupt>:
 2f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000025e <wait>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	08 c0       	rjmp	.+16     	; 0x274 <wait+0x16>
 264:	e9 ef       	ldi	r30, 0xF9	; 249
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <wait+0xa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <wait+0x10>
 26e:	00 00       	nop
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	28 17       	cp	r18, r24
 276:	39 07       	cpc	r19, r25
 278:	ac f3       	brlt	.-22     	; 0x264 <wait+0x6>
 27a:	08 95       	ret

Disassembly of section .text.spi_masterInit:

00000294 <spi_masterInit>:
		}
}

void spi_masterInit(void)
{
	DDR_SPI = 0xff;							// All pins output: MOSI, SCK, SS, SS_display as output
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);				// 	except: MISO input
 298:	87 b3       	in	r24, 0x17	; 23
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);				// SS_ADC == 1: deselect slave
 29e:	88 b3       	in	r24, 0x18	; 24
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);	// or: SPCR = 0b11010010;
 2a4:	82 e5       	ldi	r24, 0x52	; 82
 2a6:	8d b9       	out	0x0d, r24	; 13
 2a8:	08 95       	ret

Disassembly of section .text.spi_write:

000002ec <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )				
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 2ec:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
 2ee:	77 9b       	sbis	0x0e, 7	; 14
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <spi_write+0x2>
}
 2f2:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

0000027c <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 27c:	98 b3       	in	r25, 0x18	; 24
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <spi_slaveSelect+0xc>
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <spi_slaveSelect+0x8>
 28c:	20 95       	com	r18
 28e:	29 23       	and	r18, r25
 290:	28 bb       	out	0x18, r18	; 24
 292:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

000002aa <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 2aa:	98 b3       	in	r25, 0x18	; 24
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <spi_slaveDeSelect+0xc>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <spi_slaveDeSelect+0x8>
 2ba:	29 2b       	or	r18, r25
 2bc:	28 bb       	out	0x18, r18	; 24
 2be:	08 95       	ret

Disassembly of section .text.displayDriverInit:

00000132 <displayDriverInit>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete 
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 192:	08 95       	ret

Disassembly of section .text.spi_writeWord:

00000218 <spi_writeWord>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	d8 2f       	mov	r29, r24
 21e:	c6 2f       	mov	r28, r22
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 226:	8d 2f       	mov	r24, r29
 228:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

Disassembly of section .text.writeNumber:

000000a4 <writeNumber>:
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <writeNumber+0x8>
  ac:	00 d0       	rcall	.+0      	; 0xae <writeNumber+0xa>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	99 23       	and	r25, r25
  b4:	dc f0       	brlt	.+54     	; 0xec <writeNumber+0x48>
  b6:	4a e0       	ldi	r20, 0x0A	; 10
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <itoa>
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <writeNumber+0x42>
  c8:	e1 2f       	mov	r30, r17
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	8c 0f       	add	r24, r28
  d4:	9d 1f       	adc	r25, r29
  d6:	e8 0f       	add	r30, r24
  d8:	f9 1f       	adc	r31, r25
  da:	60 81       	ld	r22, Z
  dc:	60 53       	subi	r22, 0x30	; 48
  de:	81 2f       	mov	r24, r17
  e0:	0e 94 0c 01 	call	0x218	; 0x218 <spi_writeWord>
  e4:	1f 5f       	subi	r17, 0xFF	; 255
  e6:	15 30       	cpi	r17, 0x05	; 5
  e8:	78 f3       	brcs	.-34     	; 0xc8 <writeNumber+0x24>
  ea:	1b c0       	rjmp	.+54     	; 0x122 <writeNumber+0x7e>
  ec:	4a e0       	ldi	r20, 0x0A	; 10
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	be 01       	movw	r22, r28
  f2:	6f 5f       	subi	r22, 0xFF	; 255
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <itoa>
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	0c c0       	rjmp	.+24     	; 0x116 <writeNumber+0x72>
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e1 0f       	add	r30, r17
 108:	f1 1d       	adc	r31, r1
 10a:	60 81       	ld	r22, Z
 10c:	60 53       	subi	r22, 0x30	; 48
 10e:	81 2f       	mov	r24, r17
 110:	0e 94 0c 01 	call	0x218	; 0x218 <spi_writeWord>
 114:	1f 5f       	subi	r17, 0xFF	; 255
 116:	14 30       	cpi	r17, 0x04	; 4
 118:	90 f3       	brcs	.-28     	; 0xfe <writeNumber+0x5a>
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	0e 94 0c 01 	call	0x218	; 0x218 <spi_writeWord>
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

Disassembly of section .text.main:

00000194 <main>:
 194:	cf 93       	push	r28
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	87 bb       	out	0x17, r24	; 23
 19a:	0e 94 4a 01 	call	0x294	; 0x294 <spi_masterInit>
 19e:	0e 94 99 00 	call	0x132	; 0x132 <displayDriverInit>
 1a2:	c1 e0       	ldi	r28, 0x01	; 1
 1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <main+0x2c>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 3e 01 	call	0x27c	; 0x27c <spi_slaveSelect>
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_write>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_slaveDeSelect>
 1be:	cf 5f       	subi	r28, 0xFF	; 255
 1c0:	c3 30       	cpi	r28, 0x03	; 3
 1c2:	88 f3       	brcs	.-30     	; 0x1a6 <main+0x12>
 1c4:	88 ee       	ldi	r24, 0xE8	; 232
 1c6:	93 e0       	ldi	r25, 0x03	; 3
 1c8:	0e 94 2f 01 	call	0x25e	; 0x25e <wait>
 1cc:	84 e4       	ldi	r24, 0x44	; 68
 1ce:	9e ef       	ldi	r25, 0xFE	; 254
 1d0:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 1d4:	88 ee       	ldi	r24, 0xE8	; 232
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	0e 94 2f 01 	call	0x25e	; 0x25e <wait>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

Disassembly of section .text.avrlibc:

000002c0 <itoa>:
 2c0:	45 32       	cpi	r20, 0x25	; 37
 2c2:	51 05       	cpc	r21, r1
 2c4:	20 f4       	brcc	.+8      	; 0x2ce <itoa+0xe>
 2c6:	42 30       	cpi	r20, 0x02	; 2
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <itoa+0xe>
 2ca:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__itoa_ncheck>
 2ce:	fb 01       	movw	r30, r22
 2d0:	10 82       	st	Z, r1
 2d2:	cb 01       	movw	r24, r22
 2d4:	08 95       	ret

Disassembly of section .text.avrlibc:

000002d6 <__itoa_ncheck>:
 2d6:	bb 27       	eor	r27, r27
 2d8:	4a 30       	cpi	r20, 0x0A	; 10
 2da:	31 f4       	brne	.+12     	; 0x2e8 <__itoa_ncheck+0x12>
 2dc:	99 23       	and	r25, r25
 2de:	22 f4       	brpl	.+8      	; 0x2e8 <__itoa_ncheck+0x12>
 2e0:	bd e2       	ldi	r27, 0x2D	; 45
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__utoa_common>

Disassembly of section .text.avrlibc:

000001e4 <__utoa_ncheck>:
 1e4:	bb 27       	eor	r27, r27

000001e6 <__utoa_common>:
 1e6:	fb 01       	movw	r30, r22
 1e8:	55 27       	eor	r21, r21
 1ea:	aa 27       	eor	r26, r26
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	a4 17       	cp	r26, r20
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <__utoa_common+0x14>
 1f6:	a4 1b       	sub	r26, r20
 1f8:	83 95       	inc	r24
 1fa:	50 51       	subi	r21, 0x10	; 16
 1fc:	b9 f7       	brne	.-18     	; 0x1ec <__utoa_common+0x6>
 1fe:	a0 5d       	subi	r26, 0xD0	; 208
 200:	aa 33       	cpi	r26, 0x3A	; 58
 202:	08 f0       	brcs	.+2      	; 0x206 <__utoa_common+0x20>
 204:	a9 5d       	subi	r26, 0xD9	; 217
 206:	a1 93       	st	Z+, r26
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	79 f7       	brne	.-34     	; 0x1ea <__utoa_common+0x4>
 20c:	b1 11       	cpse	r27, r1
 20e:	b1 93       	st	Z+, r27
 210:	11 92       	st	Z+, r1
 212:	cb 01       	movw	r24, r22
 214:	0c 94 1f 01 	jmp	0x23e	; 0x23e <strrev>

Disassembly of section .text.avrlibc:

0000023e <strrev>:
 23e:	dc 01       	movw	r26, r24
 240:	fc 01       	movw	r30, r24
 242:	67 2f       	mov	r22, r23
 244:	71 91       	ld	r23, Z+
 246:	77 23       	and	r23, r23
 248:	e1 f7       	brne	.-8      	; 0x242 <strrev+0x4>
 24a:	32 97       	sbiw	r30, 0x02	; 2
 24c:	04 c0       	rjmp	.+8      	; 0x256 <strrev+0x18>
 24e:	7c 91       	ld	r23, X
 250:	6d 93       	st	X+, r22
 252:	70 83       	st	Z, r23
 254:	62 91       	ld	r22, -Z
 256:	ae 17       	cp	r26, r30
 258:	bf 07       	cpc	r27, r31
 25a:	c8 f3       	brcs	.-14     	; 0x24e <strrev+0x10>
 25c:	08 95       	ret
