
week2B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ce  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  000002fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010e6  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000093a  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a7  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000118  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028a  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fd  00000000  00000000  000025ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  000028eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000046  0000010c  0000010c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_string 0000001a  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    0000000a  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.display_text 0000001e  000001de  000001de  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 00000015  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.main    00000052  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.libgcc  0000001c  000001fc  000001fc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
   8:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
   c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  28:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  40:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  48:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  4c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  54:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  58:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  5c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  60:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  64:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  68:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  6c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  70:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  74:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  78:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  7c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  80:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  84:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  88:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5d 00 	call	0xba	; 0xba <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000256 <__bad_interrupt>:
 256:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001c0 <wait>:
void lcd_clear(void);



void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	ef ec       	ldi	r30, 0xCF	; 207
 1c8:	f7 e0       	ldi	r31, 0x07	; 7
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <wait+0xa>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <wait+0x10>
 1d0:	00 00       	nop
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	28 17       	cp	r18, r24
 1d8:	39 07       	cpc	r19, r25
 1da:	ac f3       	brlt	.-22     	; 0x1c6 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1dc:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000152 <lcd_strobe_lcd_e>:


void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8b bb       	out	0x1b, r24	; 27
 158:	8f ec       	ldi	r24, 0xCF	; 207
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_strobe_lcd_e+0xa>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_strobe_lcd_e+0x10>
 162:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	8b bb       	out	0x1b, r24	; 27
 16a:	8f ec       	ldi	r24, 0xCF	; 207
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_strobe_lcd_e+0x1c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_strobe_lcd_e+0x22>
 174:	00 00       	nop
 176:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

0000010c <init_4bits_mode>:
}




void init_4bits_mode(void) {
 10c:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 112:	85 bb       	out	0x15, r24	; 21
	
	DDRD = 0xFF;
 114:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 116:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 118:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 11a:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 11c:	c0 e2       	ldi	r28, 0x20	; 32
 11e:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 120:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 124:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 126:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 12e:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 132:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 134:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 138:	80 ef       	ldi	r24, 0xF0	; 240
 13a:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 13c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 140:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 142:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 14a:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000178 <lcd_write_data>:
		lcd_write_data(*str);
	}
}


void lcd_write_data(unsigned char byte) {
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 17c:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	80 61       	ori	r24, 0x10	; 16
 182:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 184:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 188:	c2 95       	swap	r28
 18a:	c0 7f       	andi	r28, 0xF0	; 240
 18c:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 194:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000218 <lcd_write_string>:
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}


void lcd_write_string(char *str) {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 21e:	03 c0       	rjmp	.+6      	; 0x226 <lcd_write_string+0xe>
		lcd_write_data(*str);
 220:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	88 81       	ld	r24, Y
 228:	81 11       	cpse	r24, r1
 22a:	fa cf       	rjmp	.-12     	; 0x220 <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

Disassembly of section .text.lcd_write_command:

0000019c <lcd_write_command>:
	lcd_strobe_lcd_e();
}



void lcd_write_command(unsigned char byte) {
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1a0:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	8f 7e       	andi	r24, 0xEF	; 239
 1a6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1a8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1ac:	c2 95       	swap	r28
 1ae:	c0 7f       	andi	r28, 0xF0	; 240
 1b0:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1b8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_strobe_lcd_e>
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000232 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_write_command>
 238:	8f e9       	ldi	r24, 0x9F	; 159
 23a:	9f e0       	ldi	r25, 0x0F	; 15
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_clear+0xa>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_clear+0x10>
 242:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_write_command>
 24a:	08 95       	ret

Disassembly of section .text.init:

0000024c <init>:




void init(){
	init_4bits_mode();
 24c:	0e 94 86 00 	call	0x10c	; 0x10c <init_4bits_mode>
	
	lcd_clear();
 250:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
 254:	08 95       	ret

Disassembly of section .text.display_text:

000001de <display_text>:
	
	
}

void display_text(char *str){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	lcd_clear();
 1e4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
	wait( 100 );
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <wait>
	lcd_write_string(str);
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_string>
	
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

Disassembly of section .text.main:

000000ba <main>:
#include <xc.h>
#include "main.h"
#include "LCD.h"

int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	65 97       	sbiw	r28, 0x15	; 21
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	
	init();
  ce:	0e 94 26 01 	call	0x24c	; 0x24c <init>
	
	
	
	char string[] = "Test Jtag!";
  d2:	24 ea       	ldi	r18, 0xA4	; 164
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	8b e0       	ldi	r24, 0x0B	; 11
  da:	f9 01       	movw	r30, r18
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	74 2f       	mov	r23, r20
  e2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__movmemx_qi>
	
	display_text(&string);
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 ef 00 	call	0x1de	; 0x1de <display_text>
	
	char string2[]=  "Jtag Test";
  ee:	2f ea       	ldi	r18, 0xAF	; 175
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	f9 01       	movw	r30, r18
  f8:	de 01       	movw	r26, r28
  fa:	1c 96       	adiw	r26, 0x0c	; 12
  fc:	74 2f       	mov	r23, r20
  fe:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__movmemx_qi>
	
	display_text(&string2);
 102:	ce 01       	movw	r24, r28
 104:	0c 96       	adiw	r24, 0x0c	; 12
 106:	0e 94 ef 00 	call	0x1de	; 0x1de <display_text>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x50>

Disassembly of section .text.libgcc:

000001fc <__movmemx_qi>:
 1fc:	99 27       	eor	r25, r25

000001fe <__movmemx_hi>:
 1fe:	77 fd       	sbrc	r23, 7
 200:	06 c0       	rjmp	.+12     	; 0x20e <__movmemx_hi+0x10>
 202:	7b bf       	out	0x3b, r23	; 59
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	e1 f7       	brne	.-8      	; 0x204 <__movmemx_hi+0x6>
 20c:	08 95       	ret
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	e1 f7       	brne	.-8      	; 0x20e <__movmemx_hi+0x10>
 216:	08 95       	ret
