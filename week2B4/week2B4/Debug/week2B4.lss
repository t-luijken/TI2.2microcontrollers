
week2B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b2c  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000830  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000299  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008e  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000142  00000142  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000112  00000112  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000038  000000da  000000da  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data.numbers 00000036  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.libgcc  00000012  00000130  00000130  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 6d 00 	call	0xda	; 0xda <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000112 <wait>:
#include <util/delay.h>
#include <avr/interrupt.h>


void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	08 c0       	rjmp	.+16     	; 0x128 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <wait+0xa>
 120:	00 c0       	rjmp	.+0      	; 0x122 <wait+0x10>
 122:	00 00       	nop
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	ac f3       	brlt	.-22     	; 0x118 <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
 12e:	08 95       	ret

Disassembly of section .text.main:

000000da <main>:


int main( void ) {
	// Init I/O
	
	DDRD = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	81 bb       	out	0x11, r24	; 17
	
	
	
	while (1)
	{
	for (int i =0; i<27; i++)
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	13 c0       	rjmp	.+38     	; 0x10a <main+0x30>
	{
		PORTD = numbers[i];
  e4:	ce 01       	movw	r24, r28
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	09 2e       	mov	r0, r25
  ec:	00 0c       	add	r0, r0
  ee:	aa 0b       	sbc	r26, r26
  f0:	8c 55       	subi	r24, 0x5C	; 92
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	af 4f       	sbci	r26, 0xFF	; 255
  f6:	fc 01       	movw	r30, r24
  f8:	5a 2f       	mov	r21, r26
  fa:	0e 94 98 00 	call	0x130	; 0x130 <__xload_2>
  fe:	62 bb       	out	0x12, r22	; 18
		wait( 250 );
 100:	8a ef       	ldi	r24, 0xFA	; 250
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 89 00 	call	0x112	; 0x112 <wait>
	
	
	
	while (1)
	{
	for (int i =0; i<27; i++)
 108:	21 96       	adiw	r28, 0x01	; 1
 10a:	cb 31       	cpi	r28, 0x1B	; 27
 10c:	d1 05       	cpc	r29, r1
 10e:	54 f3       	brlt	.-44     	; 0xe4 <main+0xa>
 110:	e6 cf       	rjmp	.-52     	; 0xde <main+0x4>

Disassembly of section .text.libgcc:

00000130 <__xload_2>:
 130:	57 fd       	sbrc	r21, 7
 132:	04 c0       	rjmp	.+8      	; 0x13c <__xload_2+0xc>
 134:	5b bf       	out	0x3b, r21	; 59
 136:	67 91       	elpm	r22, Z+
 138:	77 91       	elpm	r23, Z+
 13a:	08 95       	ret
 13c:	61 91       	ld	r22, Z+
 13e:	71 91       	ld	r23, Z+
 140:	08 95       	ret
