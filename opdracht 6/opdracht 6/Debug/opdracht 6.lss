
opdracht 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b4a  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000082f  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d2  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000142  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000012a  0000012a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000086  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000012a <wait>:
notes:            Busy wait, not very accurate. Make sure (external)
                clock value is set. This is used by _delay_ms inside
                util/delay.h
*******************************************************************/
{
    for (int i=0; i<ms; i++) {
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	08 c0       	rjmp	.+16     	; 0x140 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	e9 ef       	ldi	r30, 0xF9	; 249
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <wait+0xa>
 138:	00 c0       	rjmp	.+0      	; 0x13a <wait+0x10>
 13a:	00 00       	nop
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	ac f3       	brlt	.-22     	; 0x130 <wait+0x6>
        _delay_ms( 1 );        // library function (max 30 ms at 8MHz)
    }
}
 146:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:


 

int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x8>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	 int freqState = 0;
	 int states[] = {1000,4000};
  b0:	88 ee       	ldi	r24, 0xE8	; 232
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	80 ea       	ldi	r24, 0xA0	; 160
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
	 int pressed = 0;
	
	
	
	DDRD = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
  c4:	14 ba       	out	0x14, r1	; 20

int main(void)
{
	 int freqState = 0;
	 int states[] = {1000,4000};
	 int pressed = 0;
  c6:	c1 2c       	mov	r12, r1
  c8:	d1 2c       	mov	r13, r1

 

int main(void)
{
	 int freqState = 0;
  ca:	e1 2c       	mov	r14, r1
  cc:	f1 2c       	mov	r15, r1
	DDRD = 0xFF;
	DDRC = 0x00;
	
    while(1)
    {
        if ((PINC == 0x01))
  ce:	83 b3       	in	r24, 0x13	; 19
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	61 f4       	brne	.+24     	; 0xec <main+0x48>
        {
			if (pressed == 0)
  d4:	c1 14       	cp	r12, r1
  d6:	d1 04       	cpc	r13, r1
  d8:	89 f4       	brne	.+34     	; 0xfc <main+0x58>
			{
				pressed = 1;
				if (freqState == 0)
  da:	ef 28       	or	r14, r15
  dc:	51 f4       	brne	.+20     	; 0xf2 <main+0x4e>
    {
        if ((PINC == 0x01))
        {
			if (pressed == 0)
			{
				pressed = 1;
  de:	cc 24       	eor	r12, r12
  e0:	c3 94       	inc	r12
  e2:	d1 2c       	mov	r13, r1
				if (freqState == 0)
				{
					freqState = 1;
  e4:	ee 24       	eor	r14, r14
  e6:	e3 94       	inc	r14
  e8:	f1 2c       	mov	r15, r1
  ea:	08 c0       	rjmp	.+16     	; 0xfc <main+0x58>
					freqState = 0;
				}
			}
			
        }else{
			pressed = 0;
  ec:	c1 2c       	mov	r12, r1
  ee:	d1 2c       	mov	r13, r1
  f0:	05 c0       	rjmp	.+10     	; 0xfc <main+0x58>
    {
        if ((PINC == 0x01))
        {
			if (pressed == 0)
			{
				pressed = 1;
  f2:	cc 24       	eor	r12, r12
  f4:	c3 94       	inc	r12
  f6:	d1 2c       	mov	r13, r1
				if (freqState == 0)
				{
					freqState = 1;
					}else{
					freqState = 0;
  f8:	e1 2c       	mov	r14, r1
  fa:	f1 2c       	mov	r15, r1
			
        }else{
			pressed = 0;
		}
		
		PORTD = 0x40;
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	82 bb       	out	0x12, r24	; 18
		wait(states[freqState]);
 100:	87 01       	movw	r16, r14
 102:	00 0f       	add	r16, r16
 104:	11 1f       	adc	r17, r17
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
 10e:	08 0f       	add	r16, r24
 110:	19 1f       	adc	r17, r25
 112:	f8 01       	movw	r30, r16
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	0e 94 95 00 	call	0x12a	; 0x12a <wait>
		PORTD = 0x00;
 11c:	12 ba       	out	0x12, r1	; 18
		wait(states[freqState]);
 11e:	f8 01       	movw	r30, r16
 120:	80 81       	ld	r24, Z
 122:	91 81       	ldd	r25, Z+1	; 0x01
 124:	0e 94 95 00 	call	0x12a	; 0x12a <wait>
		
    }
 128:	d2 cf       	rjmp	.-92     	; 0xce <main+0x2a>
