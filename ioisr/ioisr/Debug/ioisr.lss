
ioisr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b6d  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000083d  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002be  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b6  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000144  00000144  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000118  00000118  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000064  000000b4  000000b4  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data.numbers 00000010  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.libgcc  0000000e  00000136  00000136  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  6c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  70:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  74:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  7c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  80:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  84:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000118 <wait>:
#include <util/delay.h>
#include <avr/interrupt.h>


void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	08 c0       	rjmp	.+16     	; 0x12e <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	ef ec       	ldi	r30, 0xCF	; 207
 120:	f7 e0       	ldi	r31, 0x07	; 7
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <wait+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <wait+0x10>
 128:	00 00       	nop
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	28 17       	cp	r18, r24
 130:	39 07       	cpc	r19, r25
 132:	ac f3       	brlt	.-22     	; 0x11e <wait+0x6>
		_delay_ms( 1 );        // library function (max 30 ms at 8MHz)
	}
}
 134:	08 95       	ret

Disassembly of section .text.main:

000000b4 <main>:



int main( void ) {
	// Init I/O
	DDRC = 0x00;
  b4:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF;	
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	81 bb       	out	0x11, r24	; 17
	0b01110001, //F
};



int main( void ) {
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	
	int index = 0;
			
	while (1)
	{
		PORTD = numbers[index];
  be:	ce 01       	movw	r24, r28
  c0:	0d 2e       	mov	r0, r29
  c2:	00 0c       	add	r0, r0
  c4:	aa 0b       	sbc	r26, r26
  c6:	8c 55       	subi	r24, 0x5C	; 92
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
  ca:	af 4f       	sbci	r26, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	5a 2f       	mov	r21, r26
  d0:	0e 94 9b 00 	call	0x136	; 0x136 <__xload_1>
  d4:	62 bb       	out	0x12, r22	; 18
		
		if (index > 16)
  d6:	c1 31       	cpi	r28, 0x11	; 17
  d8:	d1 05       	cpc	r29, r1
  da:	34 f0       	brlt	.+12     	; 0xe8 <main+0x34>
		{
			wait(250);
  dc:	8a ef       	ldi	r24, 0xFA	; 250
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 8c 00 	call	0x118	; 0x118 <wait>
			index = 0;
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	d0 e0       	ldi	r29, 0x00	; 0
		}

		if (PINC == 0x01)
  e8:	83 b3       	in	r24, 0x13	; 19
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	29 f4       	brne	.+10     	; 0xf8 <main+0x44>
		{
			wait(250);
  ee:	8a ef       	ldi	r24, 0xFA	; 250
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 8c 00 	call	0x118	; 0x118 <wait>
			index ++;
  f6:	21 96       	adiw	r28, 0x01	; 1
		}

		if (PINC == 0x02)
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	29 f4       	brne	.+10     	; 0x108 <main+0x54>
		{
			wait(250);
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 8c 00 	call	0x118	; 0x118 <wait>
			index --;
 106:	21 97       	sbiw	r28, 0x01	; 1
		}

		if (PINC == 0x03)
 108:	83 b3       	in	r24, 0x13	; 19
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	c1 f6       	brne	.-80     	; 0xbe <main+0xa>
		{
			wait(250);
 10e:	8a ef       	ldi	r24, 0xFA	; 250
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 8c 00 	call	0x118	; 0x118 <wait>
 116:	d1 cf       	rjmp	.-94     	; 0xba <main+0x6>

Disassembly of section .text.libgcc:

00000136 <__xload_1>:
 136:	57 fd       	sbrc	r21, 7
 138:	03 c0       	rjmp	.+6      	; 0x140 <__xload_1+0xa>
 13a:	5b bf       	out	0x3b, r21	; 59
 13c:	67 91       	elpm	r22, Z+
 13e:	08 95       	ret
 140:	60 81       	ld	r22, Z
 142:	08 95       	ret
