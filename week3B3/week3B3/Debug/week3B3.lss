
week3B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b51  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000086d  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d2  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000068  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b3  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000134  00000134  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.timer2Init 00000012  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_9 0000004a  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000012  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.msCount  00000002  00800100  00800100  000001ee  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <_etext>
  28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  70:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  74:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  7c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  80:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  84:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

00000176 <__bad_interrupt>:
 176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000134 <wait>:
#define BIT(x)            (1 << (x))

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	08 c0       	rjmp	.+16     	; 0x14a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	ef ec       	ldi	r30, 0xCF	; 207
 13c:	f7 e0       	ldi	r31, 0x07	; 7
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <wait+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <wait+0x10>
 144:	00 00       	nop
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	28 17       	cp	r18, r24
 14c:	39 07       	cpc	r19, r25
 14e:	ac f3       	brlt	.-22     	; 0x13a <wait+0x6>
		_delay_ms( 1 );            // library function (max 30 ms at 8MHz)
	}
}
 150:	08 95       	ret

Disassembly of section .text.timer2Init:

00000152 <timer2Init>:

volatile int msCount = 0;

void timer2Init( void ) {
	OCR2 = 250;                // Compare value of counter 2
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7);        // T2 compare match interrupt enable
 156:	87 b7       	in	r24, 0x37	; 55
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	87 bf       	out	0x37, r24	; 55
	sei();                    // turn_on intr all
 15c:	78 94       	sei
	TCCR2 = 0b0001101;        // Initialize T2: timer, prescaler=32, compare output disconnected,CTC,RUN
 15e:	8d e0       	ldi	r24, 0x0D	; 13
 160:	85 bd       	out	0x25, r24	; 37
 162:	08 95       	ret

Disassembly of section .text.__vector_9:

000000ea <__vector_9>:
}

ISR( TIMER2_COMP_vect ) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	msCount++;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (	msCount == 1)
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	41 f4       	brne	.+16     	; 0x126 <__vector_9+0x3c>
	{
		PORTC ^= BIT(0);  
 116:	95 b3       	in	r25, 0x15	; 21
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 27       	eor	r24, r25
 11c:	85 bb       	out	0x15, r24	; 21
		msCount = 0;  
 11e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

Disassembly of section .text.main:

00000164 <main>:

int main( void ) {
	DDRC = 0xFF;                // set PORTC for output (toggle PC0)
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	84 bb       	out	0x14, r24	; 20
	timer2Init();
 168:	0e 94 a9 00 	call	0x152	; 0x152 <timer2Init>

	while (1) {
		// do something else
		wait(10);            // every 10 ms (busy waiting
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 9a 00 	call	0x134	; 0x134 <wait>
 174:	fb cf       	rjmp	.-10     	; 0x16c <main+0x8>
