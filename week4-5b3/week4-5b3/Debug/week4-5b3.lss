
week4-5b3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000121e  00000000  00000000  000003bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a12  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054a  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000128  00000000  00000000  00002538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a2  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000034d  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002a4  000002a4  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000020a  0000020a  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  0000017c  0000017c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000046  00000102  00000102  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  000001a2  000001a2  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_string 0000001a  00000246  00000246  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  000001c6  000001c6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  00000260  00000260  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    0000000a  00000290  00000290  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.display_text 0000001e  00000228  00000228  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.adcInit 0000000a  0000029a  0000029a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    0000005e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.avrlibc 00000016  0000027a  0000027a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.avrlibc 00000034  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.avrlibc 00000020  000001ea  000001ea  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
   8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
   c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  10:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  14:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  18:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  1c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  20:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  24:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  28:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  30:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  34:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  3c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  40:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  44:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  48:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  4c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  50:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  54:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  5c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  60:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  64:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  68:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  6c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  70:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  74:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  78:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  7c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  80:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  84:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  88:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000002a4 <__bad_interrupt>:
 2a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000020a <wait>:
void lcd_clear(void);



void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	08 c0       	rjmp	.+16     	; 0x220 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	ef ec       	ldi	r30, 0xCF	; 207
 212:	f7 e0       	ldi	r31, 0x07	; 7
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <wait+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <wait+0x10>
 21a:	00 00       	nop
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	ac f3       	brlt	.-22     	; 0x210 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 226:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

0000017c <lcd_strobe_lcd_e>:


void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	8b bb       	out	0x1b, r24	; 27
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_strobe_lcd_e+0xa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_strobe_lcd_e+0x10>
 18c:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	8b bb       	out	0x1b, r24	; 27
 194:	8f ec       	ldi	r24, 0xCF	; 207
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_strobe_lcd_e+0x1c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_strobe_lcd_e+0x22>
 19e:	00 00       	nop
 1a0:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000102 <init_4bits_mode>:
}




void init_4bits_mode(void) {
 102:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 108:	85 bb       	out	0x15, r24	; 21
	
	DDRD = 0xFF;
 10a:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 10c:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 110:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 112:	c0 e2       	ldi	r28, 0x20	; 32
 114:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 116:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 11a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 11c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
	PORTC = 0x80;
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 124:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 128:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 12a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 12e:	80 ef       	ldi	r24, 0xF0	; 240
 130:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 132:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 136:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 138:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
	PORTC = 0x60;
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 140:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000001a2 <lcd_write_data>:
		lcd_write_data(*str);
	}
}


void lcd_write_data(unsigned char byte) {
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1a6:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 1a8:	8b b3       	in	r24, 0x1b	; 27
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1ae:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1b2:	c2 95       	swap	r28
 1b4:	c0 7f       	andi	r28, 0xF0	; 240
 1b6:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 1b8:	8b b3       	in	r24, 0x1b	; 27
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1be:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000246 <lcd_write_string>:
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}


void lcd_write_string(char *str) {
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_write_string+0xe>
		lcd_write_data(*str);
 24e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	88 81       	ld	r24, Y
 256:	81 11       	cpse	r24, r1
 258:	fa cf       	rjmp	.-12     	; 0x24e <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001c6 <lcd_write_command>:
	lcd_strobe_lcd_e();
}



void lcd_write_command(unsigned char byte) {
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1ca:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 1cc:	8b b3       	in	r24, 0x1b	; 27
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1d2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1d6:	c2 95       	swap	r28
 1d8:	c0 7f       	andi	r28, 0xF0	; 240
 1da:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 1dc:	8b b3       	in	r24, 0x1b	; 27
 1de:	8f 7e       	andi	r24, 0xEF	; 239
 1e0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 1e2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_strobe_lcd_e>
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000260 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_write_command>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_clear+0xa>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_clear+0x10>
 270:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_write_command>
 278:	08 95       	ret

Disassembly of section .text.init:

00000290 <init>:




void init(){
	init_4bits_mode();
 290:	0e 94 81 00 	call	0x102	; 0x102 <init_4bits_mode>
	
	lcd_clear();
 294:	0e 94 30 01 	call	0x260	; 0x260 <lcd_clear>
 298:	08 95       	ret

Disassembly of section .text.display_text:

00000228 <display_text>:
	
	
}

void display_text(char *str){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	lcd_clear();
 22e:	0e 94 30 01 	call	0x260	; 0x260 <lcd_clear>
	wait( 100 );
 232:	84 e6       	ldi	r24, 0x64	; 100
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 05 01 	call	0x20a	; 0x20a <wait>
	lcd_write_string(str);
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 23 01 	call	0x246	; 0x246 <lcd_write_string>
	
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

Disassembly of section .text.adcInit:

0000029a <adcInit>:


// Initialize ADC:
void adcInit( void )
{
	ADMUX = 0b11100001;            // AREF=2,56 V, result left adjusted, channel1 at pin PF1
 29a:	81 ee       	ldi	r24, 0xE1	; 225
 29c:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0b10000110;        // ADC-enable, no interrupt, no free running, division by 64
 29e:	86 e8       	ldi	r24, 0x86	; 134
 2a0:	86 b9       	out	0x06, r24	; 6
 2a2:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
}


// Main program: Counting on T1
int main( void )
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	64 97       	sbiw	r28, 0x14	; 20
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
	
	DDRF = 0x00;                    // set PORTF for input (ADC)
  b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;                    // set PORTA for output
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a bb       	out	0x1a, r24	; 26
	adcInit();                        // initialize ADC
  c0:	0e 94 4d 01 	call	0x29a	; 0x29a <adcInit>
	init();
  c4:	0e 94 48 01 	call	0x290	; 0x290 <init>
	
	while (1)
	{
		lcd_clear();
  c8:	0e 94 30 01 	call	0x260	; 0x260 <lcd_clear>
		ADCSRA |= BIT(6);                // Start ADC
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	86 b9       	out	0x06, r24	; 6
		while ( ADCSRA & BIT(6) ) ;        // Wait for completion
  d2:	36 99       	sbic	0x06, 6	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x2e>
		PORTA = ADCH;                    // Show MSB (bit 9:2) of ADC
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	8b bb       	out	0x1b, r24	; 27
		
		int temp = 2* (2 + ADCH);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 96       	adiw	r24, 0x02	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0e 94 3d 01 	call	0x27a	; 0x27a <__itoa_ncheck>
		
		char str[20];
		
		itoa(temp, str, 10);
		
		display_text(&str);
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 14 01 	call	0x228	; 0x228 <display_text>
		wait(5000);                        // every 50 ms (busy waiting)
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	0e 94 05 01 	call	0x20a	; 0x20a <wait>
	}
 100:	e3 cf       	rjmp	.-58     	; 0xc8 <main+0x24>

Disassembly of section .text.avrlibc:

0000027a <__itoa_ncheck>:
 27a:	bb 27       	eor	r27, r27
 27c:	4a 30       	cpi	r20, 0x0A	; 10
 27e:	31 f4       	brne	.+12     	; 0x28c <__itoa_ncheck+0x12>
 280:	99 23       	and	r25, r25
 282:	22 f4       	brpl	.+8      	; 0x28c <__itoa_ncheck+0x12>
 284:	bd e2       	ldi	r27, 0x2D	; 45
 286:	90 95       	com	r25
 288:	81 95       	neg	r24
 28a:	9f 4f       	sbci	r25, 0xFF	; 255
 28c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__utoa_common>

Disassembly of section .text.avrlibc:

00000148 <__utoa_ncheck>:
 148:	bb 27       	eor	r27, r27

0000014a <__utoa_common>:
 14a:	fb 01       	movw	r30, r22
 14c:	55 27       	eor	r21, r21
 14e:	aa 27       	eor	r26, r26
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	aa 1f       	adc	r26, r26
 156:	a4 17       	cp	r26, r20
 158:	10 f0       	brcs	.+4      	; 0x15e <__utoa_common+0x14>
 15a:	a4 1b       	sub	r26, r20
 15c:	83 95       	inc	r24
 15e:	50 51       	subi	r21, 0x10	; 16
 160:	b9 f7       	brne	.-18     	; 0x150 <__utoa_common+0x6>
 162:	a0 5d       	subi	r26, 0xD0	; 208
 164:	aa 33       	cpi	r26, 0x3A	; 58
 166:	08 f0       	brcs	.+2      	; 0x16a <__utoa_common+0x20>
 168:	a9 5d       	subi	r26, 0xD9	; 217
 16a:	a1 93       	st	Z+, r26
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	79 f7       	brne	.-34     	; 0x14e <__utoa_common+0x4>
 170:	b1 11       	cpse	r27, r1
 172:	b1 93       	st	Z+, r27
 174:	11 92       	st	Z+, r1
 176:	cb 01       	movw	r24, r22
 178:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <strrev>

Disassembly of section .text.avrlibc:

000001ea <strrev>:
 1ea:	dc 01       	movw	r26, r24
 1ec:	fc 01       	movw	r30, r24
 1ee:	67 2f       	mov	r22, r23
 1f0:	71 91       	ld	r23, Z+
 1f2:	77 23       	and	r23, r23
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <strrev+0x4>
 1f6:	32 97       	sbiw	r30, 0x02	; 2
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <strrev+0x18>
 1fa:	7c 91       	ld	r23, X
 1fc:	6d 93       	st	X+, r22
 1fe:	70 83       	st	Z, r23
 200:	62 91       	ld	r22, -Z
 202:	ae 17       	cp	r26, r30
 204:	bf 07       	cpc	r27, r31
 206:	c8 f3       	brcs	.-14     	; 0x1fa <strrev+0x10>
 208:	08 95       	ret
