
week3B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000459  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001297  00000000  00000000  000004f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a2a  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000058c  00000000  00000000  000021b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a2  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000043c  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000390  00000390  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000002e8  000002e8  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  0000025a  0000025a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000046  000001e0  000001e0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000280  00000280  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_string 0000001a  00000324  00000324  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  000002a4  000002a4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  0000033e  0000033e  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    0000000a  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.display_text 0000001e  00000306  00000306  0000039a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_10 000000a6  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.timer2Init 00000018  00000358  00000358  000003ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    0000004a  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.tenthValue 00000002  00800100  00800100  0000042a  2**0
                  ALLOC
 26 .data.TimerPreset 00000002  00800102  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.avrlibc 00000016  00000370  00000370  00000404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 00000034  00000226  00000226  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 00000020  000002c8  000002c8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
   8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
   c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_etext>
  2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  38:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
  88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 01       	movw	r16, r0
  92:	02 01       	movw	r0, r4
  94:	04 00       	.word	0x0004	; ????
  96:	03 94       	inc	r0

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

00000390 <__bad_interrupt>:
 390:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000002e8 <wait>:
void lcd_clear(void);



void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	ef ec       	ldi	r30, 0xCF	; 207
 2f0:	f7 e0       	ldi	r31, 0x07	; 7
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <wait+0xa>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <wait+0x10>
 2f8:	00 00       	nop
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	28 17       	cp	r18, r24
 300:	39 07       	cpc	r19, r25
 302:	ac f3       	brlt	.-22     	; 0x2ee <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 304:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

0000025a <lcd_strobe_lcd_e>:


void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	8f ec       	ldi	r24, 0xCF	; 207
 262:	97 e0       	ldi	r25, 0x07	; 7
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_strobe_lcd_e+0xa>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_strobe_lcd_e+0x10>
 26a:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	8f 7b       	andi	r24, 0xBF	; 191
 270:	8b bb       	out	0x1b, r24	; 27
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_strobe_lcd_e+0x1c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_strobe_lcd_e+0x22>
 27c:	00 00       	nop
 27e:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000001e0 <init_4bits_mode>:
}




void init_4bits_mode(void) {
 1e0:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 1e6:	85 bb       	out	0x15, r24	; 21
	
	DDRD = 0xFF;
 1e8:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 1ea:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 1ec:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 1ee:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 1f0:	c0 e2       	ldi	r28, 0x20	; 32
 1f2:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 1f4:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 1f8:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 1fa:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
	PORTC = 0x80;
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 202:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 206:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 208:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 20c:	80 ef       	ldi	r24, 0xF0	; 240
 20e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 210:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 214:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 216:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
	PORTC = 0x60;
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 21e:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
}
 222:	cf 91       	pop	r28
 224:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000280 <lcd_write_data>:
		lcd_write_data(*str);
	}
}


void lcd_write_data(unsigned char byte) {
 280:	cf 93       	push	r28
 282:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 284:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 28c:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 290:	c2 95       	swap	r28
 292:	c0 7f       	andi	r28, 0xF0	; 240
 294:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 29c:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
}
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000324 <lcd_write_string>:
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}


void lcd_write_string(char *str) {
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 32a:	03 c0       	rjmp	.+6      	; 0x332 <lcd_write_string+0xe>
		lcd_write_data(*str);
 32c:	0e 94 40 01 	call	0x280	; 0x280 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 330:	21 96       	adiw	r28, 0x01	; 1
 332:	88 81       	ld	r24, Y
 334:	81 11       	cpse	r24, r1
 336:	fa cf       	rjmp	.-12     	; 0x32c <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000002a4 <lcd_write_command>:
	lcd_strobe_lcd_e();
}



void lcd_write_command(unsigned char byte) {
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 2a8:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2b0:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 2b4:	c2 95       	swap	r28
 2b6:	c0 7f       	andi	r28, 0xF0	; 240
 2b8:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 2ba:	8b b3       	in	r24, 0x1b	; 27
 2bc:	8f 7e       	andi	r24, 0xEF	; 239
 2be:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2c0:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_strobe_lcd_e>
}
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

Disassembly of section .text.lcd_clear:

0000033e <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_write_command>
 344:	8f e9       	ldi	r24, 0x9F	; 159
 346:	9f e0       	ldi	r25, 0x0F	; 15
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_clear+0xa>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_clear+0x10>
 34e:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_write_command>
 356:	08 95       	ret

Disassembly of section .text.init:

00000386 <init>:




void init(){
	init_4bits_mode();
 386:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <init_4bits_mode>
	
	lcd_clear();
 38a:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clear>
 38e:	08 95       	ret

Disassembly of section .text.display_text:

00000306 <display_text>:
	
	
}

void display_text(char *str){
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	ec 01       	movw	r28, r24
	lcd_clear();
 30c:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clear>
	wait( 100 );
 310:	84 e6       	ldi	r24, 0x64	; 100
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wait>
	lcd_write_string(str);
 318:	ce 01       	movw	r24, r28
 31a:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write_string>
	
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

Disassembly of section .text.__vector_10:

000000f0 <__vector_10>:

volatile int TimerPreset = -1;  // 0xF6, 10 till overflow
volatile int tenthValue = 0;

// Interrupt routine timer2 overflow
ISR( TIMER2_OVF_vect ) {
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	0b b6       	in	r0, 0x3b	; 59
  fc:	0f 92       	push	r0
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	64 97       	sbiw	r28, 0x14	; 20
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61
	TCNT2 = TimerPreset;	// Preset value
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TimerPreset>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <TimerPreset+0x1>
 12c:	84 bd       	out	0x24, r24	; 36
	tenthValue++;		// Increment counter
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
		lcd_clear();
 140:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clear>
		
		char string[20];
		
		itoa(tenthValue,string,10);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	0e 94 b8 01 	call	0x370	; 0x370 <__itoa_ncheck>
		
		display_text(&string);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 83 01 	call	0x306	; 0x306 <display_text>
		//sprintf()
}
 160:	64 96       	adiw	r28, 0x14	; 20
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

Disassembly of section .text.timer2Init:

00000358 <timer2Init>:

// Initialize timer2
void timer2Init( void ) {
	TCNT2 = TimerPreset;	// Preset value of counter 2
 358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TimerPreset>
 35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <TimerPreset+0x1>
 360:	84 bd       	out	0x24, r24	; 36
	TIMSK |= BIT(6);		// T2 overflow interrupt enable
 362:	87 b7       	in	r24, 0x37	; 55
 364:	80 64       	ori	r24, 0x40	; 64
 366:	87 bf       	out	0x37, r24	; 55
	sei();				// turn_on intr all
 368:	78 94       	sei
	TCCR2 = 0x07;		// Initialize T2: ext.counting, rising edge, run
 36a:	87 e0       	ldi	r24, 0x07	; 7
 36c:	85 bd       	out	0x25, r24	; 37
 36e:	08 95       	ret

Disassembly of section .text.main:

00000196 <main>:
}

int main(void) {
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <main+0x6>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	
	init();
 1a0:	0e 94 c3 01 	call	0x386	; 0x386 <init>
	
	DDRD &= ~BIT(7);		// PD7 op input: DDRD=xxxx xxx0
 1a4:	81 b3       	in	r24, 0x11	; 17
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;			// set PORTA for output (shows countregister)
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;			// set PORTB for output (shows tenthvalue)
 1ae:	87 bb       	out	0x17, r24	; 23
	
	timer2Init();
 1b0:	0e 94 ac 01 	call	0x358	; 0x358 <timer2Init>
	

lcd_clear();
 1b4:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clear>
char string0[] = "0";
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	9a 83       	std	Y+2, r25	; 0x02
 1be:	89 83       	std	Y+1, r24	; 0x01
display_text(&string0);
 1c0:	ce 01       	movw	r24, r28
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	0e 94 83 01 	call	0x306	; 0x306 <display_text>

	while (1) {
		PORTA = TCNT2;		// show value counter 2
 1c8:	84 b5       	in	r24, 0x24	; 36
 1ca:	8b bb       	out	0x1b, r24	; 27
		PORTB = tenthValue;	// show value tenth counter
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	88 bb       	out	0x18, r24	; 24
	
		
	
		
		
		wait(10);
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wait>
 1de:	f4 cf       	rjmp	.-24     	; 0x1c8 <main+0x32>

Disassembly of section .text.avrlibc:

00000370 <__itoa_ncheck>:
 370:	bb 27       	eor	r27, r27
 372:	4a 30       	cpi	r20, 0x0A	; 10
 374:	31 f4       	brne	.+12     	; 0x382 <__itoa_ncheck+0x12>
 376:	99 23       	and	r25, r25
 378:	22 f4       	brpl	.+8      	; 0x382 <__itoa_ncheck+0x12>
 37a:	bd e2       	ldi	r27, 0x2D	; 45
 37c:	90 95       	com	r25
 37e:	81 95       	neg	r24
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	0c 94 14 01 	jmp	0x228	; 0x228 <__utoa_common>

Disassembly of section .text.avrlibc:

00000226 <__utoa_ncheck>:
 226:	bb 27       	eor	r27, r27

00000228 <__utoa_common>:
 228:	fb 01       	movw	r30, r22
 22a:	55 27       	eor	r21, r21
 22c:	aa 27       	eor	r26, r26
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	a4 17       	cp	r26, r20
 236:	10 f0       	brcs	.+4      	; 0x23c <__utoa_common+0x14>
 238:	a4 1b       	sub	r26, r20
 23a:	83 95       	inc	r24
 23c:	50 51       	subi	r21, 0x10	; 16
 23e:	b9 f7       	brne	.-18     	; 0x22e <__utoa_common+0x6>
 240:	a0 5d       	subi	r26, 0xD0	; 208
 242:	aa 33       	cpi	r26, 0x3A	; 58
 244:	08 f0       	brcs	.+2      	; 0x248 <__utoa_common+0x20>
 246:	a9 5d       	subi	r26, 0xD9	; 217
 248:	a1 93       	st	Z+, r26
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	79 f7       	brne	.-34     	; 0x22c <__utoa_common+0x4>
 24e:	b1 11       	cpse	r27, r1
 250:	b1 93       	st	Z+, r27
 252:	11 92       	st	Z+, r1
 254:	cb 01       	movw	r24, r22
 256:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <strrev>

Disassembly of section .text.avrlibc:

000002c8 <strrev>:
 2c8:	dc 01       	movw	r26, r24
 2ca:	fc 01       	movw	r30, r24
 2cc:	67 2f       	mov	r22, r23
 2ce:	71 91       	ld	r23, Z+
 2d0:	77 23       	and	r23, r23
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <strrev+0x4>
 2d4:	32 97       	sbiw	r30, 0x02	; 2
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <strrev+0x18>
 2d8:	7c 91       	ld	r23, X
 2da:	6d 93       	st	X+, r22
 2dc:	70 83       	st	Z, r23
 2de:	62 91       	ld	r22, -Z
 2e0:	ae 17       	cp	r26, r30
 2e2:	bf 07       	cpc	r27, r31
 2e4:	c8 f3       	brcs	.-14     	; 0x2d8 <strrev+0x10>
 2e6:	08 95       	ret
